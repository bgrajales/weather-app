{"version":3,"sources":["actions/search.js","actions/weather.js","components/uiElements/InfoGrid.js","components/main/HomeScreen.js","hooks/useForm.js","reducers/searchReducer.js","reducers/weatherReducer.js","App.js","index.js"],"names":["searchInputAutocomplete","city","searchDispatch","length","fetch","then","response","json","data","type","payload","catch","error","console","log","getCityWeather","dispatch","process","res","err","InfoGrid","useContext","WeatherContext","state","avrevDays","hours","d","Date","hour","getHours","index","push","useEffect","weather","className","location","region","name","src","current","condition","icon","alt","text","Math","round","temp_c","getDay","getDate","forecast","forecastday","date","getUTCDate","day","avgtemp_c","HomeScreen","coords","initialState","SearchContext","useState","values","setValues","target","value","useForm","formValues","handleInputChange","searchState","citySearch","setCitySearch","navigator","geolocation","getCurrentPosition","position","latitude","longitude","onSubmit","e","preventDefault","placeholder","list","onChange","autoComplete","id","searchMatch","map","match","searchReducer","action","weatherReducer","createContext","App","useReducer","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6436d49d.chunk.js","sourcesContent":["\r\nexport const searchInputAutocomplete = ( city, searchDispatch ) => {\r\n\r\n    if(city.length > 3) {\r\n        fetch(`https://api.weatherapi.com/v1/search.json?key=60d54e3e3aaf464a9be142040210812&q=${city}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            searchDispatch({\r\n                type: 'SEARCH_INPUT_AUTOCOMPLETE',\r\n                payload: data\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n    \r\n\r\n}","\r\nexport const getCityWeather = ( city, dispatch ) => {\r\n\r\n    fetch(`https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${city}&days=7&aqi=no&alerts=no`)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n\r\n        dispatch({\r\n            type: 'GET_WEATHER',\r\n            payload: data\r\n        })\r\n        return data;\r\n    })\r\n    .catch(err => console.log(err));\r\n\r\n}\r\n\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { getCityWeather } from '../../actions/weather'\r\nimport { WeatherContext } from '../../App'\r\n\r\nexport const InfoGrid = ({ city }) => {\r\n\r\n    const { state, dispatch } = useContext(WeatherContext)\r\n\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    const avrevDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n\r\n    const hours = []\r\n    const d = new Date();\r\n\r\n    let hour = d.getHours();\r\n\r\n    for (let index = 0; index < 4; index++) {\r\n        hours.push(hour + index)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (city !== '') {\r\n            getCityWeather(city, dispatch)\r\n        }\r\n    }, [city, dispatch])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                state.weather\r\n                ? <div className=\"parent\">\r\n                <div className=\"div1\">\r\n                    <h1>{state.weather.location.region}</h1>\r\n                    <h4>{state.weather.location.name}</h4>\r\n                    <img src={state.weather.current.condition.icon} alt=\"weather icon\" />\r\n                    <span>{state.weather.current.condition.text}</span>\r\n                    <p>{Math.round(state.weather.current.temp_c)}°</p>\r\n                </div>\r\n                <div className=\"div2\">\r\n                    <div className=\"infoGrid__todayHeader\">\r\n                        <h1>Today</h1>\r\n                        <h1>{days[d.getDay()]} {d.getDate()} - {d.getHours()}hs</h1>\r\n                    </div>\r\n                    <div className=\"infoGrid__hoursForecast\">\r\n                        <div>\r\n                            <h3>{hours[0]}h</h3>\r\n                            <img src={state.weather.forecast.forecastday[0].hour[hours[0]].condition.icon} alt=\"weather icon\" />\r\n                            <p>{Math.round(state.weather.forecast.forecastday[0].hour[hours[0]].temp_c)}°</p>\r\n                        </div>\r\n                        <div>\r\n                            <h3>{hours[1]}h</h3>\r\n                            <img src={state.weather.forecast.forecastday[0].hour[hours[1]].condition.icon} alt=\"weather icon\" />\r\n                            <p>{Math.round(state.weather.forecast.forecastday[0].hour[hours[1]].temp_c)}°</p>\r\n                        </div>\r\n                        <div>\r\n                            <h3>{hours[2]}h</h3>\r\n                            <img src={state.weather.forecast.forecastday[0].hour[hours[2]].condition.icon} alt=\"weather icon\" />\r\n                            <p>{Math.round(state.weather.forecast.forecastday[0].hour[hours[2]].temp_c)}°</p>\r\n                        </div>\r\n                        <div>\r\n                            <h3>{hours[3]}h</h3>\r\n                            <img src={state.weather.forecast.forecastday[0].hour[hours[3]].condition.icon} alt=\"weather icon\" />\r\n                            <p>{Math.round(state.weather.forecast.forecastday[0].hour[hours[3]].temp_c)}°</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"div3\">\r\n                    <div>\r\n                        <h1>\r\n                            {`${avrevDays[d.getDay()]} `}\r\n                            {new Date(state.weather.forecast.forecastday[0].date).getUTCDate()}\r\n                        </h1>\r\n                        <img src={state.weather.forecast.forecastday[0].day.condition.icon} alt=\"weather icon\" />\r\n                        <p>{Math.round(state.weather.forecast.forecastday[0].day.avgtemp_c)}°</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>\r\n                            {`${avrevDays[d.getDay() + 1]} `}\r\n                            {new Date(state.weather.forecast.forecastday[1].date).getUTCDate()}\r\n                        </h1>\r\n                        <img src={state.weather.forecast.forecastday[1].day.condition.icon} alt=\"weather icon\" />\r\n                        <p>{Math.round(state.weather.forecast.forecastday[1].day.avgtemp_c)}°</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>\r\n                            {`${avrevDays[d.getDay() + 2]} `}\r\n                            {new Date(state.weather.forecast.forecastday[2].date).getUTCDate()}\r\n                        </h1>\r\n                        <img src={state.weather.forecast.forecastday[2].day.condition.icon} alt=\"weather icon\" />\r\n                        <p>{Math.round(state.weather.forecast.forecastday[2].day.avgtemp_c)}°</p>\r\n                    </div>\r\n                    {/* <div>\r\n                        <h1>{state.weather.forecast.forecastday[3].date}</h1>\r\n                        <AiFillCloud />\r\n                        <p>17°</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>{state.weather.forecast.forecastday[4].date}</h1>\r\n                        <AiFillCloud />\r\n                        <p>17°</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>{state.weather.forecast.forecastday[5].date}</h1>\r\n                        <AiFillCloud />\r\n                        <p>17°</p>\r\n                    </div>\r\n                    <div>\r\n                        <h1>{state.weather.forecast.forecastday[6].date}</h1>\r\n                        <AiFillCloud />\r\n                        <p>17°</p>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n            : <div>\r\n                <h1>Loading...</h1>\r\n              </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { SearchContext, WeatherContext } from '../../App'\r\nimport { useForm } from '../../hooks/useForm'\r\nimport { InfoGrid } from '../uiElements/InfoGrid'\r\nimport { getCityWeather } from '../../actions/weather'\r\n\r\nexport const HomeScreen = () => {\r\n\r\n    const [ formValues, handleInputChange ] = useForm({\r\n        city: '',\r\n    })\r\n    \r\n    const { searchState } = useContext(SearchContext)\r\n    const { dispatch } = useContext(WeatherContext)\r\n\r\n    const [ citySearch, setCitySearch ] = useState('')\r\n\r\n    const handleCitySubmit = (e) => {\r\n        e.preventDefault()\r\n        setCitySearch(formValues.city)\r\n    }\r\n\r\n    let coords\r\n\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n        const { latitude, longitude } = position.coords\r\n        coords = latitude + ' ' + longitude\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (coords) {\r\n            getCityWeather(coords, dispatch)\r\n        }\r\n    }, [coords, dispatch])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"app__ball1\"></div>\r\n            <div className=\"app__ball2\"></div>\r\n            <div className=\"app__ball3\"></div>\r\n            <div className=\"app__ball4\"></div>\r\n            <header>\r\n                <h1 className=\"app__title\">Weather App</h1>\r\n\r\n                <form onSubmit={ handleCitySubmit }>\r\n                    <input type=\"text\" placeholder=\"City\" list=\"autocomplete\" name=\"city\" value={ formValues.city } onChange={ handleInputChange } autoComplete=\"false\"/>\r\n                    <datalist id=\"autocomplete\">\r\n                        {\r\n                            searchState.searchMatch &&\r\n                            searchState.searchMatch.map(match =>  <option key={ match.id } value={ match.name } >{ match.name }</option>)\r\n                        }\r\n                    </datalist>\r\n                    <button type=\"submit\">Search</button>\r\n                </form>\r\n            </header>\r\n\r\n            <InfoGrid city={ citySearch } />\r\n\r\n        </>\r\n    )\r\n}\r\n","import { useContext, useState } from \"react\"\r\nimport { searchInputAutocomplete } from \"../actions/search\";\r\nimport { SearchContext } from \"../App\";\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const { searchDispatch } = useContext(SearchContext)\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n        searchInputAutocomplete(values.city, searchDispatch)\r\n    }\r\n\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","\r\nexport const searchReducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SEARCH_INPUT_AUTOCOMPLETE':\r\n            return {\r\n                ...state,\r\n                searchMatch: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","\r\nexport const weatherReducer = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'GET_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import { createContext, useReducer } from \"react\";\nimport { HomeScreen } from \"./components/main/HomeScreen\";\nimport { searchReducer } from \"./reducers/searchReducer\";\nimport { weatherReducer } from \"./reducers/weatherReducer\";\n\nexport const WeatherContext = createContext();\nexport const SearchContext = createContext();\n\nexport function App() {\n\n  const [ state, dispatch ] = useReducer(weatherReducer, {})\n  const [ searchState, searchDispatch ] = useReducer(searchReducer, {})\n\n  return (\n    <WeatherContext.Provider value={{ state, dispatch }}>\n      <SearchContext.Provider value={{ searchState, searchDispatch }}>\n      <div className=\"App\">\n        <HomeScreen />\n      </div>\n      </SearchContext.Provider>\n    </WeatherContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}